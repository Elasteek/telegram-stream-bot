"""
Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∞–º–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
"""
import os
import logging
from datetime import datetime, timedelta
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters, ContextTypes
from dotenv import load_dotenv
import asyncio
import threading
import time

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot_log.txt'  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
CONTACT = 0

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('stream_bot.db')
    conn.row_factory = sqlite3.Row
    return conn

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_message_to_user(bot, user_id, text, reply_markup=None):
    try:
        await bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    existing_user = cursor.fetchone()
    conn.close()
    
    if existing_user:
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! "
            f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç—Ä–∏–º–∞—Ö."
        )
        await show_main_menu(update, context)
    else:
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! "
            f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        keyboard = [
            [KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=reply_markup)
        
        return CONTACT

async def process_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    contact = update.message.contact
    phone = contact.phone_number
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute(
        "INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, phone) VALUES (?, ?, ?, ?, ?)",
        (user.id, user.username, user.first_name, user.last_name, phone)
    )
    conn.commit()
    conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, {user.first_name}! "
        f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—à–∏—Ö —Å—Ç—Ä–∏–º–∞—Ö.",
        reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(update, context)
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await schedule_user_notifications(user.id)
    
    return ConversationHandler.END

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üé¨ –ë–ª–∏–∂–∞–π—à–∏–µ —Å—Ç—Ä–∏–º—ã", callback_data="upcoming_streams")],
        [InlineKeyboardButton("üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="useful_content")],
        [InlineKeyboardButton("üéì –ù–∞—à–∏ –∫—É—Ä—Å—ã", callback_data="our_courses")],
        [InlineKeyboardButton("üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="feedback")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç—Ä–∏–º–∞—Ö:", reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç—Ä–∏–º–∞—Ö:", reply_markup=reply_markup
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "upcoming_streams":
        await show_upcoming_streams(update, context)
    elif query.data == "useful_content":
        await show_useful_content(update, context)
    elif query.data == "our_courses":
        await show_courses(update, context)
    elif query.data == "feedback":
        await request_feedback(update, context)
    elif query.data == "main_menu":
        await show_main_menu(update, context)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
        pass

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
async def show_upcoming_streams(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    conn = get_db_connection()
    upcoming_streams = conn.execute("""
    SELECT stream_id, title, description, stream_date, is_closed
    FROM streams
    WHERE stream_date > datetime('now')
    ORDER BY stream_date
    LIMIT 5
    """).fetchall()
    conn.close()
    
    if not upcoming_streams:
        await query.edit_message_text(
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∏–º–æ–≤. "
            "–ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ —Å—Ç—Ä–∏–º—ã!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]])
        )
        return
    
    text = "üì∫ –ë–ª–∏–∂–∞–π—à–∏–µ —Å—Ç—Ä–∏–º—ã:\n\n"
    for stream in upcoming_streams:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏
        try:
            stream_date = datetime.fromisoformat(stream['stream_date'].replace('Z', '+00:00'))
            formatted_date = stream_date.strftime('%d.%m.%Y %H:%M')
        except:
            formatted_date = stream['stream_date']  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        
        text += f"üé¨ {stream['title']}\n"
        text += f"üìù {stream['description']}\n"
        text += f"üìÖ {formatted_date}\n"
        if stream['is_closed']:
            text += "üîí –ó–∞–∫—Ä—ã—Ç—ã–π —Å—Ç—Ä–∏–º\n"
        text += "\n"
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text=text, reply_markup=reply_markup)

async def show_useful_content(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    conn = get_db_connection()
    content_items = conn.execute("""
    SELECT content_id, content_type, title, description, link
    FROM content
    ORDER BY created_at DESC
    LIMIT 5
    """).fetchall()
    conn.close()
    
    if not content_items:
        await query.edit_message_text(
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. "
            "–ú—ã –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]])
        )
        return
    
    text = "üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n\n"
    for item in content_items:
        text += f"üìå {item['title']}\n"
        text += f"üìù {item['description']}\n"
        if item['link']:
            text += f"üîó {item['link']}\n"
        text += "\n"
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text=text, reply_markup=reply_markup)

async def show_courses(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    # –î–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ –ë–î, 
    # –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Å—Ç–∞–≤–∏–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    
    text = "üéì –ù–∞—à–∏ –∫—É—Ä—Å—ã:\n\n"
    text += "1Ô∏è‚É£ –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å - –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö\n"
    text += "üëâ https://example.com/basic-course\n\n"
    text += "2Ô∏è‚É£ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫—É—Ä—Å - –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö\n"
    text += "üëâ https://example.com/advanced-course\n\n"
    text += "3Ô∏è‚É£ –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å - –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤\n"
    text += "üëâ https://example.com/master-class\n\n"
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text=text, reply_markup=reply_markup)

async def request_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç—Ä–∏–º, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    conn = get_db_connection()
    last_stream = conn.execute("""
    SELECT stream_id, title FROM streams 
    WHERE stream_date < datetime('now') 
    ORDER BY stream_date DESC 
    LIMIT 1
    """).fetchone()
    conn.close()
    
    if not last_stream:
        await query.edit_message_text(
            "–£ –Ω–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ —Å—Ç—Ä–∏–º–æ–≤, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. "
            "–ü–æ—Å–ª–µ —É—á–∞—Å—Ç–∏—è –≤ —Å—Ç—Ä–∏–º–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]])
        )
        return
    
    context.user_data['feedback_stream_id'] = last_stream['stream_id']
    
    text = f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ —Å—Ç—Ä–∏–º—É \"{last_stream['title']}\"\n\n"
    text += "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text=text, reply_markup=reply_markup)

async def process_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    feedback_text = update.message.text
    
    if 'feedback_stream_id' in context.user_data:
        stream_id = context.user_data['feedback_stream_id']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS feedback (
            feedback_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            stream_id INTEGER,
            feedback_text TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """)
        
        cursor.execute(
            "INSERT INTO feedback (user_id, stream_id, feedback_text) VALUES (?, ?, ?)",
            (user.id, stream_id, feedback_text)
        )
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞—à–∏—Ö —Å—Ç—Ä–∏–º–æ–≤."
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(update, context)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ID —Å—Ç—Ä–∏–º–∞
        del context.user_data['feedback_stream_id']
    else:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."
        )
        await show_main_menu(update, context)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def schedule_user_notifications(user_id):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å—Ç—Ä–∏–º–æ–≤"""
    
    conn = get_db_connection()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    conn.execute("""
    CREATE TABLE IF NOT EXISTS notifications (
        notification_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        stream_id INTEGER,
        notification_type TEXT,
        sent INTEGER DEFAULT 0,
        scheduled_time TEXT
    )
    """)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å—Ç—Ä–∏–º—ã
    upcoming_streams = conn.execute("""
    SELECT stream_id, title, stream_date, is_closed, access_link
    FROM streams
    WHERE stream_date > datetime('now')
    ORDER BY stream_date
    """).fetchall()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn.execute("DELETE FROM notifications WHERE user_id = ? AND sent = 0", (user_id,))
    
    for stream in upcoming_streams:
        stream_id = stream['stream_id']
        stream_date_str = stream['stream_date']
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ datetime
        try:
            stream_date = datetime.fromisoformat(stream_date_str.replace('Z', '+00:00'))
        except:
            # –ï—Å–ª–∏ –Ω–µ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
            try:
                stream_date = datetime.strptime(stream_date_str, '%Y-%m-%d %H:%M:%S')
            except:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –¥–ª—è —Å—Ç—Ä–∏–º–∞ {stream_id}: {stream_date_str}")
                continue
        
        now = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∏–º –≤ –±—É–¥—É—â–µ–º
        if stream_date <= now:
            continue
        
        # –†–∞—Å—á–µ—Ç –¥–Ω–µ–π –¥–æ —Å—Ç—Ä–∏–º–∞
        days_until_stream = (stream_date - now).days
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å, –∑–∞ –¥–≤–∞ –∏ —Ç.–¥. –¥–æ —Å—Ç—Ä–∏–º–∞
        for day in range(min(days_until_stream, 7), 0, -2):  # –ö–∞–∂–¥—ã–µ 2 –¥–Ω—è, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏
            notification_date = stream_date - timedelta(days=day)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É
            conn.execute(
                """
                INSERT INTO notifications 
                (user_id, stream_id, notification_type, scheduled_time) 
                VALUES (?, ?, ?, ?)
                """,
                (user_id, stream_id, 'reminder', notification_date.strftime('%Y-%m-%d %H:%M:%S'))
            )
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –¥–µ–Ω—å —Å—Ç—Ä–∏–º–∞ (—É—Ç—Ä–æ–º)
        morning_time = stream_date.replace(hour=9, minute=0, second=0)
        if morning_time > now:
            conn.execute(
                """
                INSERT INTO notifications 
                (user_id, stream_id, notification_type, scheduled_time) 
                VALUES (?, ?, ?, ?)
                """,
                (user_id, stream_id, 'day_of_stream', morning_time.strftime('%Y-%m-%d %H:%M:%S'))
            )
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ —á–∞—Å –¥–æ —Å—Ç—Ä–∏–º–∞
        hour_before = stream_date - timedelta(hours=1)
        if hour_before > now:
            conn.execute(
                """
                INSERT INTO notifications 
                (user_id, stream_id, notification_type, scheduled_time) 
                VALUES (?, ?, ?, ?)
                """,
                (user_id, stream_id, 'hour_before', hour_before.strftime('%Y-%m-%d %H:%M:%S'))
            )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —Å—Ç—Ä–∏–º–∞
        conn.execute(
            """
            INSERT INTO notifications 
            (user_id, stream_id, notification_type, scheduled_time) 
            VALUES (?, ?, ?, ?)
            """,
            (user_id, stream_id, 'during_stream', stream_date.strftime('%Y-%m-%d %H:%M:%S'))
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å—Ç—Ä–∏–º–∞
        after_stream = stream_date + timedelta(hours=2)
        conn.execute(
            """
            INSERT INTO notifications 
            (user_id, stream_id, notification_type, scheduled_time) 
            VALUES (?, ?, ?, ?)
            """,
            (user_id, stream_id, 'after_stream', after_stream.strftime('%Y-%m-%d %H:%M:%S'))
        )
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –±–æ–Ω—É—Å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∫–æ–Ω—Ç–µ–Ω—Ç)
    content_count = conn.execute("SELECT COUNT(*) FROM content").fetchone()[0]
    
    if content_count > 0:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –±–æ–Ω—É—Å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
        bonus_count = min(content_count, 10)  # –ù–µ –±–æ–ª–µ–µ 10 –±–æ–Ω—É—Å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        for i in range(bonus_count):
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2-3 –¥–Ω—è
            bonus_date = now + timedelta(days=i*2 + 1)
            
            conn.execute(
                """
                INSERT INTO notifications 
                (user_id, stream_id, notification_type, scheduled_time) 
                VALUES (?, NULL, ?, ?)
                """,
                (user_id, 'bonus', bonus_date.strftime('%Y-%m-%d %H:%M:%S'))
            )
    
    conn.commit()
    conn.close()

async def send_pending_notifications(bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ"""
    
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    conn = get_db_connection()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    notifications = conn.execute("""
    SELECT n.notification_id, n.user_id, n.stream_id, n.notification_type,
           s.title, s.description, s.stream_date, s.is_closed, s.access_link
    FROM notifications n
    LEFT JOIN streams s ON n.stream_id = s.stream_id
    WHERE n.sent = 0 AND n.scheduled_time <= ?
    """, (now,)).fetchall()
    
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
    
    for notification in notifications:
        notification_id = notification['notification_id']
        user_id = notification['user_id']
        stream_id = notification['stream_id']
        notification_type = notification['notification_type']
        
        # –ì–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        message_text = ""
        
        if notification_type == 'reminder':
            message_text = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º —Å—Ç—Ä–∏–º–µ!\n\n"
            if stream_id:
                message_text += f"üì∫ {notification['title']}\n"
                message_text += f"üìù {notification['description']}\n"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                try:
                    stream_date = datetime.fromisoformat(notification['stream_date'].replace('Z', '+00:00'))
                    days_until = (stream_date - datetime.now()).days
                    message_text += f"‚è≥ –î–æ —Å—Ç—Ä–∏–º–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {days_until} –¥–Ω–µ–π\n"
                    message_text += f"üìÖ –î–∞—Ç–∞: {stream_date.strftime('%d.%m.%Y %H:%M')}\n"
                except:
                    message_text += f"üìÖ –î–∞—Ç–∞: {notification['stream_date']}\n"
        
        elif notification_type == 'day_of_stream':
            message_text = f"üé¨ –°–µ–≥–æ–¥–Ω—è —Å–æ—Å—Ç–æ–∏—Ç—Å—è —Å—Ç—Ä–∏–º!\n\n"
            message_text += f"üì∫ {notification['title']}\n"
            message_text += f"üìù {notification['description']}\n"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            try:
                stream_date = datetime.fromisoformat(notification['stream_date'].replace('Z', '+00:00'))
                message_text += f"üïí –ù–∞—á–∞–ª–æ –≤: {stream_date.strftime('%H:%M')}\n"
            except:
                pass
        
        elif notification_type == 'hour_before':
            message_text = f"‚è∞ –°—Ç—Ä–∏–º –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ —á–∞—Å!\n\n"
            message_text += f"üì∫ {notification['title']}\n"
            message_text += f"üìù {notification['description']}\n"
            message_text += f"üîó –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É!\n"
        
        elif notification_type == 'during_stream':
            message_text = f"üî¥ –ú—ã –≤ —ç—Ñ–∏—Ä–µ!\n\n"
            message_text += f"üì∫ {notification['title']}\n"
            if notification['is_closed'] and notification['access_link']:
                message_text += f"üîê –≠—Ç–æ –∑–∞–∫—Ä—ã—Ç—ã–π —Å—Ç—Ä–∏–º. –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞: {notification['access_link']}\n"
        
        elif notification_type == 'after_stream':
            message_text = f"üé¨ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏ –Ω–∞ —Å—Ç—Ä–∏–º–µ!\n\n"
            message_text += f"üì∫ {notification['title']}\n"
            message_text += f"üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —É–ª—É—á—à–∏—Ç—å –Ω–∞—à–∏ —Å—Ç—Ä–∏–º—ã.\n"
        
        elif notification_type == 'bonus':
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            content = conn.execute("""
            SELECT title, description, link
            FROM content
            ORDER BY RANDOM()
            LIMIT 1
            """).fetchone()
            
            if content:
                message_text = f"üéÅ –ü–æ–ª–µ–∑–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–∞—Å!\n\n"
                message_text += f"üìå {content['title']}\n"
                message_text += f"üìù {content['description']}\n"
                if content['link']:
                    message_text += f"üîó {content['link']}\n"
            else:
                # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ—Ç, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                conn.execute("UPDATE notifications SET sent = 1 WHERE notification_id = ?", (notification_id,))
                continue
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        success = await send_message_to_user(bot, user_id, message_text)
        
        # –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
        if success:
            conn.execute("UPDATE notifications SET sent = 1 WHERE notification_id = ?", (notification_id,))
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    conn.commit()
    conn.close()

async def notifications_scheduler(application):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    while True:
        try:
            await send_pending_notifications(application.bot)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–∏–º–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        try:
            conn = get_db_connection()
            users = conn.execute("SELECT user_id FROM users").fetchall()
            conn.close()
            
            for user in users:
                await schedule_user_notifications(user['user_id'])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        
        # –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

def run_notifications_scheduler(application):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(notifications_scheduler(application))

async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        phone TEXT,
        registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS streams (
        stream_id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        description TEXT,
        stream_date TEXT NOT NULL,
        is_closed INTEGER DEFAULT 0,
        access_link TEXT
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS content (
        content_id INTEGER PRIMARY KEY AUTOINCREMENT,
        content_type TEXT NOT NULL,
        title TEXT NOT NULL,
        description TEXT,
        link TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS notifications (
        notification_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        stream_id INTEGER,
        notification_type TEXT,
        sent INTEGER DEFAULT 0,
        scheduled_time TEXT
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS feedback (
        feedback_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        stream_id INTEGER,
        feedback_text TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    conn.commit()
    conn.close()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    conversation_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CONTACT: [MessageHandler(filters.CONTACT, process_contact)]
        },
        fallbacks=[CommandHandler('cancel', lambda update, context: ConversationHandler.END)]
    )
    
    application.add_handler(conversation_handler)
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_feedback))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    notification_thread = threading.Thread(
        target=run_notifications_scheduler,
        args=(application,),
        daemon=True
    )
    notification_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    try:
        # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—â–∏–º –¥–æ Ctrl+C
        await application.updater.start_polling()
        await application.idle()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        await application.stop()
    finally:
        await application.shutdown()

if __name__ == '__main__':
    asyncio.run(main())
