"""
Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–∑–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏
"""
import requests
import os
import logging
from datetime import datetime, timedelta
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, Filters, CallbackContext
from dotenv import load_dotenv
import threading
import time

def send_message_to_admin(user_id, first_name, last_name, username, text):
    admin_panel_url = "https://rough-rora-flatloops-eaeed163.koyeb.app/api/bot/receive_message"
    
    data = {
        "user_id": user_id,
        "first_name": first_name,
        "last_name": last_name,
        "username": username,
        "text": text
    }
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å URL: {admin_panel_url}")
    logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {data}")
    
    try:
        response = requests.post(admin_panel_url, json=data)
        logger.info(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        logger.info(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
        
        success = response.status_code == 200
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: {success}")
        return success
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: {e}")
        return False

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot_log.txt'  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
CONTACT = 0

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('stream_bot.db')
    conn.row_factory = sqlite3.Row
    return conn

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def send_message_to_user(bot, user_id, text, reply_markup=None):
    try:
        bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
def start(update: Update, context: CallbackContext):
    user = update.effective_user
    user_id = user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    existing_user = cursor.fetchone()
    conn.close()
    
    if existing_user:
        update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!",
            reply_markup=ReplyKeyboardRemove()
        )
        # –í–º–µ—Å—Ç–æ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
        context.job_queue.run_once(
            send_welcome_invite, 
            120, 
            context={'user_id': user_id}
        )
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        show_main_menu(update, context)
    else:
        update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! "
            f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        keyboard = [
            [KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=reply_markup)
        
        return CONTACT

def send_welcome_invite(context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –≤ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã"""
    job = context.job
    user_id = job.context['user_id']
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        context.bot.send_message(
            chat_id=user_id,
            text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É Flatloops School: @flatloops_school"
        )
        logger.info(f"–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")

def process_contact(update: Update, context: CallbackContext):
    user = update.effective_user
    contact = update.message.contact
    phone = contact.phone_number
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute(
        "INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, phone) VALUES (?, ?, ?, ?, ?)",
        (user.id, user.username, user.first_name, user.last_name, phone)
    )
    conn.commit()
    conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    update.message.reply_text(
        "Flatloops School: –¢–≤–æ–π –ø—É—Ç—å –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –º—É–∑—ã–∫–µ üéßüöÄ\n\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞—é —Ç–µ–±—è –≤ Flatloops School ‚Äî –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –º—É–∑—ã–∫–∏.\n\n"
        "–ß—Ç–æ —Ç–µ–±—è –∂–¥–µ—Ç:\n"
        "* –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –æ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–º –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ\n"
        "* –ñ–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞–º–∏\n"
        "* –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –æ—Ç –ø—Ä–∏–∑–Ω–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—é—Å–µ—Ä–æ–≤\n"
        "* –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏ –∏ —Ä–∞–∑–±–æ—Ä—ã —Ç—Ä–µ–∫–æ–≤\n"
        "* –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤\n"
        "* –ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥ —Å –º—É–∑—ã–∫–∞–Ω—Ç–∞–º–∏ —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞\n\n"
        "–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ –≤–∞–∂–µ–Ω ‚Äî –≤–∞–∂–Ω–æ –∂–µ–ª–∞–Ω–∏–µ —Ç–≤–æ—Ä–∏—Ç—å –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è.\n"
        "–ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º—É–∑—ã–∫—É –º–µ—á—Ç—ã? üëâ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è: https://t.me/+r4YENOpRDldjNmEy üéöÔ∏èüé∂",
        reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    show_main_menu(update, context)
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã (120 —Å–µ–∫—É–Ω–¥)
    context.job_queue.run_once(
        send_welcome_invite, 
        120, 
        context={'user_id': user.id}
    )
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    schedule_user_notifications(user.id)
    
    return ConversationHandler.END

def show_main_menu(update: Update, context: CallbackContext):
    # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –∫—Ä–æ–º–µ "–°—Ç—Ä–∏–º—ã"
    keyboard = [
        [InlineKeyboardButton("üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="useful_content")],
        [InlineKeyboardButton("üéì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∏–Ω–∏ –∫—É—Ä—Å—ã", callback_data="educational_paths")],
        [InlineKeyboardButton("üíº –ù–∞—à–∏ –∫—É—Ä—Å—ã", callback_data="our_courses")],
        [InlineKeyboardButton("üé¨ –°—Ç—Ä–∏–º—ã", callback_data="upcoming_streams")],
        [InlineKeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –Ω–∞–º", callback_data="feedback")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥
    if update.callback_query:
        update.callback_query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup
        )
    else:
        update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup
        )

def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    
    if query.data == "upcoming_streams":
        show_upcoming_streams(update, context)
    elif query.data == "useful_content":
        show_useful_content(update, context)
    elif query.data == "educational_paths": 
        show_educational_paths(update, context)
    elif query.data == "our_courses":
        show_courses(update, context)
    elif query.data == "feedback":
        request_feedback(update, context)
    elif query.data == "main_menu":
        show_main_menu(update, context)
    elif query.data.startswith("select_path_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏
        path_id = int(query.data.split("_")[2])
        subscribe_to_path(update, context, path_id)
    elif query.data.startswith("view_current_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∫—É—Ä—Å–∞
        path_id = int(query.data.split("_")[2])
        show_current_material(update, context, path_id)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
        pass

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def show_upcoming_streams(update: Update, context: CallbackContext):
    query = update.callback_query
    
    conn = get_db_connection()
    upcoming_streams = conn.execute("""
    SELECT stream_id, title, description, stream_date, is_closed
    FROM streams
    WHERE stream_date > datetime('now')
    ORDER BY stream_date
    LIMIT 5
    """).fetchall()
    conn.close()
    
    if not upcoming_streams:
        query.edit_message_text(
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∏–º–æ–≤. "
            "–ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ —Å—Ç—Ä–∏–º—ã!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]])
        )
        return
    
    text = "üì∫ –ë–ª–∏–∂–∞–π—à–∏–µ —Å—Ç—Ä–∏–º—ã:\n\n"
    for stream in upcoming_streams:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏
        try:
            stream_date = datetime.fromisoformat(stream['stream_date'].replace('Z', '+00:00'))
            formatted_date = stream_date.strftime('%d.%m.%Y %H:%M')
        except:
            formatted_date = stream['stream_date']  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        
        text += f"üé¨ {stream['title']}\n"
        text += f"üìù {stream['description']}\n"
        text += f"üìÖ {formatted_date}\n"
        if stream['is_closed']:
            text += "üîí –ó–∞–∫—Ä—ã—Ç—ã–π —Å—Ç—Ä–∏–º\n"
        text += "\n"
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(text=text, reply_markup=reply_markup)

def show_useful_content(update: Update, context: CallbackContext):
    query = update.callback_query
    
    conn = get_db_connection()
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—Å–∫—Ä—ã—Ç—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    content_items = conn.execute("""
    SELECT content_id, content_type, title, description, link, image_url, file_url
    FROM content
    WHERE is_hidden = 0 OR is_hidden IS NULL
    ORDER BY created_at DESC
    LIMIT 5
    """).fetchall()
    conn.close()
    
    if not content_items:
        query.edit_message_text(
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. "
            "–ú—ã –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]])
        )
        return
    
    text = "üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n\n"
    for item in content_items:
        text += f"üìå {item['title']}\n"
        text += f"üìù {item['description']}\n"
        if item['link']:
            text += f"üîó {item['link']}\n"
        if item['image_url'] or item['file_url']:
            text += "üìé –î–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
        text += "\n"
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(text=text, reply_markup=reply_markup)

def show_courses(update: Update, context: CallbackContext):
    query = update.callback_query
    
    conn = get_db_connection()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ courses
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='courses'")
    table_exists = cursor.fetchone() is not None
    
    if not table_exists:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫—É—Ä—Å–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS courses (
            course_id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            description TEXT,
            link TEXT NOT NULL,
            order_num INTEGER DEFAULT 0,
            is_active INTEGER DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        conn.commit()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        default_courses = [
            ("–î–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö - –û—Å–Ω–æ–≤—ã –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–¥—é—Å–∏—Ä–æ–≤–∞–Ω–∏—è", 
             "–ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å –¥–ª—è –≤—Å–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –º—É–∑—ã–∫—É", 
             "https://www.flatloops.ru/osnovy_muzykalnogo_prodyusirovaniya", 1),
            ("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫—É—Ä—Å - –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–æ-—Ç—Ä–µ–∫–∞: –æ—Ç –∏–¥–µ–∏ –¥–æ —Ä–∞–±–æ—Ç—ã —Å –ª–µ–π–±–ª–∞–º–∏", 
             "–î–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç —É–≥–ª—É–±–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ –Ω–∞—É—á–∏—Ç—å—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª–µ–π–±–ª–∞–º–∏", 
             "https://www.flatloops.ru/education/online-group/sozdanie-tehno-treka-ot-idei-do-masteringa", 2),
            ("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫—É—Ä—Å - –¢–µ—Ö–Ω–∏–∫–∞ live –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π: –∏–≥—Ä–∞–π –≤–∂–∏–≤—É—é —Å–≤–æ–∏ —Ç—Ä–µ–∫–∏", 
             "–ù–∞—É—á–∏—Ç–µ—Å—å –≤—ã—Å—Ç—É–ø–∞—Ç—å –≤–∂–∏–≤—É—é –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å–≤–æ—é –º—É–∑—ã–∫—É –ø—É–±–ª–∏–∫–µ", 
             "https://www.flatloops.ru/education/online-group/tehnika-live-vystuplenij", 3)
        ]
        
        cursor.executemany('''
            INSERT INTO courses (title, description, link, order_num) 
            VALUES (?, ?, ?, ?)
        ''', default_courses)
        conn.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ order_num
    courses = conn.execute('''
        SELECT * FROM courses 
        WHERE is_active = 1 
        ORDER BY order_num
    ''').fetchall()
    conn.close()
    
    if not courses:
        query.edit_message_text(
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∫—É—Ä—Å—ã –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]])
        )
        return
    
    text = "üíº –ù–∞—à–∏ –∫—É—Ä—Å—ã:\n\n"
    
    for i, course in enumerate(courses, 1):
        # –î–æ–±–∞–≤–ª—è–µ–º emoji –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–æ–º–µ—Ä–∞ –∫—É—Ä—Å–∞
        if i == 1:
            emoji = "1Ô∏è‚É£"
        elif i == 2:
            emoji = "2Ô∏è‚É£"
        elif i == 3:
            emoji = "3Ô∏è‚É£"
        elif i == 4:
            emoji = "4Ô∏è‚É£"
        elif i == 5:
            emoji = "5Ô∏è‚É£"
        else:
            emoji = "üîπ"
        
        text += f"{emoji} {course['title']}\n"
        if course['description']:
            text += f"{course['description']}\n"
        text += f"üëâ {course['link']}\n\n"
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(text=text, reply_markup=reply_markup)

def request_feedback(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å" –≤ "–ù–∞–ø–∏—à–∏ –Ω–∞–º"
    text = "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
    text += "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å?"
    
    context.user_data['waiting_for_feedback'] = True
    
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(text=text, reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∫—É—Ä—Å–∞
def show_current_material(update: Update, context: CallbackContext, path_id):
    query = update.callback_query
    user_id = query.from_user.id
    
    conn = get_db_connection()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ø–æ—á–∫–µ
    sequence = conn.execute("SELECT * FROM content_sequences WHERE sequence_id = ?", (path_id,)).fetchone()
    
    if not sequence:
        conn.close()
        query.edit_message_text("–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫—É—Ä—Å.",
                                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="educational_paths")]]))
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    user_sequence = conn.execute("""
        SELECT * FROM user_sequences 
        WHERE user_id = ? AND sequence_id = ? AND is_active = 1
    """, (user_id, path_id)).fetchone()
    
    if not user_sequence or user_sequence['current_day'] == 0:
        conn.close()
        query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —ç—Ç–æ–º—É –∫—É—Ä—Å—É.",
                                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="educational_paths")]]))
        return
    
    current_day = user_sequence['current_day']
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª
    current_content = conn.execute("""
        SELECT c.* 
        FROM sequence_items si
        JOIN content c ON si.content_id = c.content_id
        WHERE si.sequence_id = ? AND si.day_number = ?
    """, (path_id, current_day)).fetchone()
    
    if not current_content:
        conn.close()
        query.edit_message_text("–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="educational_paths")]]))
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = f"üéì –í–∞—à —Ç–µ–∫—É—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –∫—É—Ä—Å–∞ \"{sequence['title']}\" (–¥–µ–Ω—å {current_day} –∏–∑ {sequence['days_count']}):\n\n"
    message_text += f"üìå {current_content['title']}\n"
    message_text += f"üìù {current_content['description']}\n"
    
    if current_content['link']:
        message_text += f"üîó {current_content['link']}\n"
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –∫—É—Ä—Å–∞, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    if current_day == sequence['days_count']:
        message_text += "\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –º–∏–Ω–∏-–∫—É—Ä—Å–∞! üéâ\n"
        message_text += "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –≤—Å–µ —ç—Ç–∞–ø—ã –æ–±—É—á–µ–Ω–∏—è.\n\n"
        message_text += "üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –ü–†–û–ú–û–ö–û–î –Ω–∞ —Å–∫–∏–¥–∫—É 20% –Ω–∞ –ø–æ–ª–Ω—ã–π –∫—É—Ä—Å:\n"
        message_text += "PROMO_" + sequence['title'].replace(" ", "_").upper() + "\n\n"
        message_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –Ω–∞—à–µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–∞ —Å–∞–π—Ç–µ:\n"
        message_text += "https://www.flatloops.ru/education\n\n"
        message_text += "–ü—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π. –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!"
    
    conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
    query.edit_message_text(text=message_text, 
                           reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="educational_paths")]]))

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ø–æ—á–µ–∫
def show_educational_paths(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    
    conn = get_db_connection()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏
    paths = conn.execute("""
    SELECT cs.sequence_id, cs.title, cs.description, cs.days_count 
    FROM content_sequences cs
    WHERE cs.sequence_id NOT IN (
        SELECT sequence_id FROM user_sequences WHERE user_id = ?
    )
    ORDER BY cs.created_at DESC
    """, (user_id,)).fetchall()
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_paths = conn.execute("""
    SELECT cs.sequence_id, cs.title, us.current_day, cs.days_count
    FROM user_sequences us
    JOIN content_sequences cs ON us.sequence_id = cs.sequence_id
    WHERE us.user_id = ? AND us.is_active = 1
    ORDER BY us.start_date DESC
    """, (user_id,)).fetchall()
    
    conn.close()
    
    text = "üéì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∏–Ω–∏ –∫—É—Ä—Å—ã\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    if active_paths:
        text += "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã:\n\n"
        for path in active_paths:
            progress = round((path['current_day'] / path['days_count']) * 100)
            text += f"üìù {path['title']}\n"
            text += f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {path['current_day']}/{path['days_count']} ({progress}%)\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ø–æ—á–∫–∏
    if paths:
        text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã:\n\n"
        for path in paths:
            text += f"üîπ {path['title']}\n"
            text += f"üìù {path['description']}\n"
            text += f"‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {path['days_count']} –¥–Ω–µ–π\n\n"
    else:
        if not active_paths:  # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö, –Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ø–æ—á–µ–∫
            text += "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
    keyboard = []
    for path in active_paths:
        keyboard.append([InlineKeyboardButton(f"üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å: {path['title']}", 
                                           callback_data=f"view_current_{path['sequence_id']}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤—ã—Ö –∫—É—Ä—Å–æ–≤ - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
    for path in paths:
        keyboard.append([InlineKeyboardButton(f"‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å: {path['title']}", 
                                           callback_data=f"select_path_{path['sequence_id']}")])
    
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="main_menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(text=text, reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–ø–æ—á–∫—É
def subscribe_to_path(update: Update, context: CallbackContext, path_id):
    query = update.callback_query
    user_id = query.from_user.id
    
    conn = get_db_connection()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ü–µ–ø–æ—á–∫–∞
    path = conn.execute("SELECT * FROM content_sequences WHERE sequence_id = ?", (path_id,)).fetchone()
    
    if not path:
        conn.close()
        query.edit_message_text("–í—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫—É—Ä—Å.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing = conn.execute("""
        SELECT COUNT(*) FROM user_sequences 
        WHERE user_id = ? AND sequence_id = ?
    """, (user_id, path_id)).fetchone()[0]
    
    if existing > 0:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
        conn.execute("""
            UPDATE user_sequences
            SET is_active = 1, current_day = 0, start_date = datetime('now')
            WHERE user_id = ? AND sequence_id = ?
        """, (user_id, path_id))
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
        conn.execute("""
            INSERT INTO user_sequences 
            (user_id, sequence_id, current_day, start_date, is_active)
            VALUES (?, ?, 0, datetime('now'), 1)
        """, (user_id, path_id))
    
    conn.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    first_day_content = conn.execute("""
    SELECT c.* 
    FROM sequence_items si
    JOIN content c ON si.content_id = c.content_id
    WHERE si.sequence_id = ? AND si.day_number = 1
    """, (path_id,)).fetchone()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
    if first_day_content:
        message_text = f"üéì –í–∞—à –ø–µ—Ä–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –∫—É—Ä—Å–∞ \"{path['title']}\":\n\n"
        message_text += f"üìå {first_day_content['title']}\n"
        message_text += f"üìù {first_day_content['description']}\n"
        
        if first_day_content['link']:
            message_text += f"üîó {first_day_content['link']}\n"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn.execute("""
        UPDATE user_sequences
        SET current_day = 1
        WHERE user_id = ? AND sequence_id = ?
        """, (user_id, path_id))
        conn.commit()
    else:
        message_text = f"üéì –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫—É—Ä—Å \"{path['title']}\"!\n\n"
        message_text += "–ü–µ—Ä–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –∑–∞–≤—Ç—Ä–∞."
    
    conn.close()
    
    # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    keyboard = [
        [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫—É—Ä—Å–∞–º", callback_data="educational_paths")],
        [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(text=message_text, reply_markup=reply_markup)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
last_message_times = {}

def process_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    user_id = user.id
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    existing_user = cursor.fetchone()
    conn.close()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–º—É –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
    if not existing_user:
        keyboard = [[KeyboardButton("/start")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ä—Ç –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    send_message_to_admin(
        user.id,
        user.first_name,
        user.last_name if user.last_name else "",
        user.username if user.username else "",
        text
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if context.user_data.get('waiting_for_feedback'):
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        del context.user_data['waiting_for_feedback']
        
        update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        last_message_times[user_id] = datetime.now()
        
        # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —Ñ–∏–¥–±–µ–∫–∞ - —Ç–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —á–∏—â–µ
        return
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –ø–æ–ª—É—á–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        current_time = datetime.now()
        last_time = last_message_times.get(user_id)
        
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        if last_time and (current_time - last_time).total_seconds() < 86400:  # 86400 —Å–µ–∫—É–Ω–¥ = 24 —á–∞—Å–∞
            pass
        else:
            update.message.reply_text(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
            )
            last_message_times[user_id] = current_time
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 7 –¥–Ω–µ–π
    if not last_time or (current_time - last_time).days > 7:
        show_main_menu(update, context)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def schedule_user_notifications(user_id):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π"""
    
    conn = get_db_connection()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    conn.execute("""
    CREATE TABLE IF NOT EXISTS notifications (
        notification_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        stream_id INTEGER,
        content_id INTEGER,
        notification_type TEXT,
        sent INTEGER DEFAULT 0,
        scheduled_time TEXT
    )
    """)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å—Ç—Ä–∏–º—ã
    upcoming_streams = conn.execute("""
    SELECT stream_id, title, stream_date, is_closed, access_link
    FROM streams
    WHERE stream_date > datetime('now')
    ORDER BY stream_date
    """).fetchall()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn.execute("DELETE FROM notifications WHERE user_id = ? AND sent = 0", (user_id,))
    
    for stream in upcoming_streams:
        stream_id = stream['stream_id']
        stream_date_str = stream['stream_date']
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ datetime
        try:
            stream_date = datetime.fromisoformat(stream_date_str.replace('Z', '+00:00'))
        except:
            # –ï—Å–ª–∏ –Ω–µ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
            try:
                stream_date = datetime.strptime(stream_date_str, '%Y-%m-%d %H:%M:%S')
            except:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –¥–ª—è —Å—Ç—Ä–∏–º–∞ {stream_id}: {stream_date_str}")
                continue
        
        now = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∏–º –≤ –±—É–¥—É—â–µ–º
        if stream_date <= now:
            continue
        
        # –†–∞—Å—á–µ—Ç –¥–Ω–µ–π –¥–æ —Å—Ç—Ä–∏–º–∞
        days_until_stream = (stream_date - now).days
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å, –∑–∞ –¥–≤–∞ –∏ —Ç.–¥. –¥–æ —Å—Ç—Ä–∏–º–∞
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç—Ä–∏–º–∞—Ö, —Ç.–∫. –æ–Ω–∏ —Ç–µ–ø–µ—Ä—å –Ω–µ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ
        if days_until_stream > 0:
            notification_date = stream_date - timedelta(days=1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É
            conn.execute(
                """
                INSERT INTO notifications 
                (user_id, stream_id, notification_type, scheduled_time) 
                VALUES (?, ?, ?, ?)
                """,
                (user_id, stream_id, 'reminder', notification_date.strftime('%Y-%m-%d %H:%M:%S'))
            )
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –¥–µ–Ω—å —Å—Ç—Ä–∏–º–∞ (—É—Ç—Ä–æ–º)
        morning_time = stream_date.replace(hour=9, minute=0, second=0)
        if morning_time > now:
            conn.execute(
                """
                INSERT INTO notifications 
                (user_id, stream_id, notification_type, scheduled_time) 
                VALUES (?, ?, ?, ?)
                """,
                (user_id, stream_id, 'day_of_stream', morning_time.strftime('%Y-%m-%d %H:%M:%S'))
            )
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_sequences = conn.execute("""
    SELECT us.*, cs.days_count
    FROM user_sequences us
    JOIN content_sequences cs ON us.sequence_id = cs.sequence_id
    WHERE us.user_id = ? AND us.is_active = 1
    """, (user_id,)).fetchall()
    
    for sequence in user_sequences:
        sequence_id = sequence['sequence_id']
        current_day = sequence['current_day']
        days_count = sequence['days_count']
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª –≤—Å—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if current_day < days_count:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
            next_day = current_day + 1
            content_item = conn.execute("""
            SELECT si.content_id
            FROM sequence_items si
            WHERE si.sequence_id = ? AND si.day_number = ?
            """, (sequence_id, next_day)).fetchone()
            
            if content_item:
                content_id = content_item['content_id']
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
                next_notification_date = datetime.now() + timedelta(days=1)
                next_notification_time = next_notification_date.replace(hour=10, minute=0, second=0)
                
                conn.execute("""
                INSERT INTO notifications 
                (user_id, content_id, notification_type, scheduled_time) 
                VALUES (?, ?, ?, ?)
                """, (user_id, content_id, 'sequence', next_notification_time.strftime('%Y-%m-%d %H:%M:%S')))
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –±–æ–Ω—É—Å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∫–æ–Ω—Ç–µ–Ω—Ç)
    content_count = conn.execute("SELECT COUNT(*) FROM content WHERE is_hidden = 0 OR is_hidden IS NULL").fetchone()[0]
    
    if content_count > 0:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –±–æ–Ω—É—Å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —Ç.–∫. –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ
        bonus_count = min(content_count, 15)  # –î–æ 15 –±–æ–Ω—É—Å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        for i in range(bonus_count):
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 1-2 –¥–Ω—è
            bonus_date = datetime.now() + timedelta(days=i*1.5 + 1)
            
            conn.execute("""
            INSERT INTO notifications 
            (user_id, content_id, notification_type, scheduled_time) 
            VALUES (?, NULL, ?, ?)
            """, (user_id, 'bonus', bonus_date.strftime('%Y-%m-%d %H:%M:%S')))
    
    conn.commit()
    conn.close()

def send_pending_notifications(bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ"""
    
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    conn = get_db_connection()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    notifications = conn.execute("""
    SELECT n.notification_id, n.user_id, n.stream_id, n.content_id, n.notification_type,
           s.title as stream_title, s.description as stream_desc, s.stream_date, s.is_closed, s.access_link,
           c.title as content_title, c.description as content_desc, c.link as content_link, 
           c.image_url, c.file_url
    FROM notifications n
    LEFT JOIN streams s ON n.stream_id = s.stream_id
    LEFT JOIN content c ON n.content_id = c.content_id
    WHERE n.sent = 0 AND n.scheduled_time <= ?
    """, (now,)).fetchall()
    
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
    
    for notification in notifications:
        notification_id = notification['notification_id']
        user_id = notification['user_id']
        notification_type = notification['notification_type']
        
        # –ì–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        message_text = ""
        
        if notification_type == 'reminder':
            message_text = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º —Å—Ç—Ä–∏–º–µ!\n\n"
            message_text += f"üì∫ {notification['stream_title']}\n"
            message_text += f"üìù {notification['stream_desc']}\n"
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            try:
                stream_date = datetime.fromisoformat(notification['stream_date'].replace('Z', '+00:00'))
                days_until = (stream_date - datetime.now()).days
                message_text += f"‚è≥ –î–æ —Å—Ç—Ä–∏–º–∞ –æ—Å—Ç–∞–ª–æ—Å—å: {days_until} –¥–Ω–µ–π\n"
                message_text += f"üìÖ –î–∞—Ç–∞: {stream_date.strftime('%d.%m.%Y %H:%M')}\n"
            except:
                message_text += f"üìÖ –î–∞—Ç–∞: {notification['stream_date']}\n"
        
        elif notification_type == 'day_of_stream':
            message_text = f"üé¨ –°–µ–≥–æ–¥–Ω—è —Å–æ—Å—Ç–æ–∏—Ç—Å—è —Å—Ç—Ä–∏–º!\n\n"
            message_text += f"üì∫ {notification['stream_title']}\n"
            message_text += f"üìù {notification['stream_desc']}\n"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            try:
                stream_date = datetime.fromisoformat(notification['stream_date'].replace('Z', '+00:00'))
                message_text += f"üïí –ù–∞—á–∞–ª–æ –≤: {stream_date.strftime('%H:%M')}\n"
            except:
                pass
        
        elif notification_type == 'sequence':
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ø–æ—á–∫–µ
            sequence_info = conn.execute("""
            SELECT cs.title, si.day_number, cs.days_count
            FROM sequence_items si
            JOIN content_sequences cs ON si.sequence_id = cs.sequence_id
            WHERE si.content_id = ?
            """, (notification['content_id'],)).fetchone()
            
            if sequence_info:
                message_text = f"üéì –î–µ–Ω—å {sequence_info['day_number']} –∏–∑ {sequence_info['days_count']}: {sequence_info['title']}\n\n"
                message_text += f"üìå {notification['content_title']}\n"
                message_text += f"üìù {notification['content_desc']}\n"
                if notification['content_link']:
                    message_text += f"üîó {notification['content_link']}\n"
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –∫—É—Ä—Å–∞, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                if sequence_info['day_number'] == sequence_info['days_count']:
                    message_text += "\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –º–∏–Ω–∏-–∫—É—Ä—Å–∞! üéâ\n"
                    message_text += "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –≤—Å–µ —ç—Ç–∞–ø—ã –æ–±—É—á–µ–Ω–∏—è.\n\n"
                    message_text += "üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –ü–†–û–ú–û–ö–û–î –Ω–∞ —Å–∫–∏–¥–∫—É 20% –Ω–∞ –ø–æ–ª–Ω—ã–π –∫—É—Ä—Å:\n"
                    message_text += "PROMO_" + sequence_info['title'].replace(" ", "_").upper() + "\n\n"
                    message_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –Ω–∞—à–µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–∞ —Å–∞–π—Ç–µ:\n"
                    message_text += "https://www.flatloops.ru/education\n\n"
                    message_text += "–ü—Ä–æ–º–æ–∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π. –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!"
                    
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                conn.execute("""
                UPDATE user_sequences
                SET current_day = ?
                WHERE user_id = ? AND sequence_id = (
                    SELECT si.sequence_id FROM sequence_items si WHERE si.content_id = ?
                )
                """, (sequence_info['day_number'], user_id, notification['content_id']))
            else:
                message_text = f"üìö –ü–æ–ª–µ–∑–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–∞—Å!\n\n"
                message_text += f"üìå {notification['content_title']}\n"
                message_text += f"üìù {notification['content_desc']}\n"
                if notification['content_link']:
                    message_text += f"üîó {notification['content_link']}\n"
        
        elif notification_type == 'bonus':
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∏—Å–∫–ª—é—á–∞—è —Å–∫—Ä—ã—Ç—ã–π
            content = conn.execute("""
            SELECT title, description, link, image_url, file_url
            FROM content
            WHERE is_hidden = 0 OR is_hidden IS NULL
            ORDER BY RANDOM()
            LIMIT 1
            """).fetchone()
            
            if content:
                message_text = f"üéÅ –ü–æ–ª–µ–∑–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤–∞—Å!\n\n"
                message_text += f"üìå {content['title']}\n"
                message_text += f"üìù {content['description']}\n"
                if content['link']:
                    message_text += f"üîó {content['link']}\n"
                if content['image_url'] or content['file_url']:
                    message_text += "üìé –î–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
            else:
                # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ—Ç, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                conn.execute("UPDATE notifications SET sent = 1 WHERE notification_id = ?", (notification_id,))
                continue
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        success = send_message_to_user(bot, user_id, message_text)
        
        # –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
        if success:
            conn.execute("UPDATE notifications SET sent = 1 WHERE notification_id = ?", (notification_id,))
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    conn.commit()
    conn.close()

def fetch_and_send_admin_messages(bot):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...")
    
    try:
        # URL –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        url = "https://rough-rora-flatloops-eaeed163.koyeb.app/api/bot/get_messages"
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        response = requests.get(url)
        
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: HTTP {response.status_code}")
            return
        
        messages = response.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        
        for message in messages:
            message_id = message.get('id')
            user_id = message.get('user_id')
            text = message.get('text')
            
            if not message_id or not user_id or not text:
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
                continue
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            success = send_message_to_user(bot, user_id, text)
            
            if success:
                # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                mark_url = f"https://rough-rora-flatloops-eaeed163.koyeb.app/api/bot/mark_sent/{message_id}"
                mark_response = requests.post(mark_url)
                
                if mark_response.status_code == 200:
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: HTTP {mark_response.status_code}")
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")

def notifications_scheduler(updater):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    bot = updater.bot
    
    while True:
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            send_pending_notifications(bot)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            fetch_and_send_admin_messages(bot)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–≤—ã—Ö —Å—Ç—Ä–∏–º–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            conn = get_db_connection()
            users = conn.execute("SELECT user_id FROM users").fetchall()
            conn.close()
            
            for user in users:
                schedule_user_notifications(user['user_id'])
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
        
        # –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

def run_notifications_scheduler(updater):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    thread = threading.Thread(target=notifications_scheduler, args=(updater,), daemon=True)
    thread.start()

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        phone TEXT,
        registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS streams (
        stream_id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        description TEXT,
        stream_date TEXT NOT NULL,
        is_closed INTEGER DEFAULT 0,
        access_link TEXT
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS content (
        content_id INTEGER PRIMARY KEY AUTOINCREMENT,
        content_type TEXT NOT NULL,
        title TEXT NOT NULL,
        description TEXT,
        link TEXT,
        image_url TEXT,
        file_url TEXT,
        is_hidden INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS content_sequences (
        sequence_id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        description TEXT,
        days_count INTEGER NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS sequence_items (
        item_id INTEGER PRIMARY KEY AUTOINCREMENT,
        sequence_id INTEGER NOT NULL,
        content_id INTEGER NOT NULL,
        day_number INTEGER NOT NULL,
        FOREIGN KEY (sequence_id) REFERENCES content_sequences (sequence_id),
        FOREIGN KEY (content_id) REFERENCES content (content_id)
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_sequences (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        sequence_id INTEGER NOT NULL,
        current_day INTEGER DEFAULT 0,
        start_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        is_active INTEGER DEFAULT 1,
        FOREIGN KEY (sequence_id) REFERENCES content_sequences (sequence_id),
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS notifications (
        notification_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        stream_id INTEGER,
        content_id INTEGER,
        notification_type TEXT,
        sent INTEGER DEFAULT 0,
        scheduled_time TEXT
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS feedback (
        feedback_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        stream_id INTEGER,
        feedback_text TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫—É—Ä—Å–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS courses (
        course_id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        description TEXT,
        link TEXT NOT NULL,
        order_num INTEGER DEFAULT 0,
        is_active INTEGER DEFAULT 1,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É —Å–∫—Ä—ã—Ç–∏—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    cursor.execute('''
    CREATE INDEX IF NOT EXISTS idx_content_is_hidden ON content (is_hidden)
    ''')
    
    conn.commit()
    conn.close()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
    updater = Updater(token=TOKEN)
    dispatcher = updater.dispatcher
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    conversation_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CONTACT: [MessageHandler(Filters.contact, process_contact)]
        },
        fallbacks=[CommandHandler('cancel', lambda update, context: ConversationHandler.END)]
    )
    
    dispatcher.add_handler(conversation_handler)
    dispatcher.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, process_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    run_notifications_scheduler(updater)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    try:
        # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—â–∏–º –¥–æ Ctrl+C
        updater.idle()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    main()